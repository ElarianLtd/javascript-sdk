/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.com.elarian.hera.proto.WalletBalance');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.com.elarian.hera.proto.Cash');
goog.require('proto.com.elarian.hera.proto.PendingWalletTransaction');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.elarian.hera.proto.WalletBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.elarian.hera.proto.WalletBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.elarian.hera.proto.WalletBalance.displayName = 'proto.com.elarian.hera.proto.WalletBalance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.elarian.hera.proto.WalletBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.com.elarian.hera.proto.WalletBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.elarian.hera.proto.WalletBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.elarian.hera.proto.WalletBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    currencyCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    available: (f = msg.getAvailable()) && proto.com.elarian.hera.proto.Cash.toObject(includeInstance, f),
    actual: (f = msg.getActual()) && proto.com.elarian.hera.proto.Cash.toObject(includeInstance, f),
    pendingMap: (f = msg.getPendingMap()) ? f.toObject(includeInstance, proto.com.elarian.hera.proto.PendingWalletTransaction.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.elarian.hera.proto.WalletBalance}
 */
proto.com.elarian.hera.proto.WalletBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.elarian.hera.proto.WalletBalance;
  return proto.com.elarian.hera.proto.WalletBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.elarian.hera.proto.WalletBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.elarian.hera.proto.WalletBalance}
 */
proto.com.elarian.hera.proto.WalletBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyCode(value);
      break;
    case 2:
      var value = new proto.com.elarian.hera.proto.Cash;
      reader.readMessage(value,proto.com.elarian.hera.proto.Cash.deserializeBinaryFromReader);
      msg.setAvailable(value);
      break;
    case 3:
      var value = new proto.com.elarian.hera.proto.Cash;
      reader.readMessage(value,proto.com.elarian.hera.proto.Cash.deserializeBinaryFromReader);
      msg.setActual(value);
      break;
    case 4:
      var value = msg.getPendingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.com.elarian.hera.proto.PendingWalletTransaction.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.elarian.hera.proto.WalletBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.elarian.hera.proto.WalletBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.elarian.hera.proto.WalletBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.elarian.hera.proto.WalletBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvailable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.elarian.hera.proto.Cash.serializeBinaryToWriter
    );
  }
  f = message.getActual();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.elarian.hera.proto.Cash.serializeBinaryToWriter
    );
  }
  f = message.getPendingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.com.elarian.hera.proto.PendingWalletTransaction.serializeBinaryToWriter);
  }
};


/**
 * optional string currency_code = 1;
 * @return {string}
 */
proto.com.elarian.hera.proto.WalletBalance.prototype.getCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.elarian.hera.proto.WalletBalance.prototype.setCurrencyCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Cash available = 2;
 * @return {?proto.com.elarian.hera.proto.Cash}
 */
proto.com.elarian.hera.proto.WalletBalance.prototype.getAvailable = function() {
  return /** @type{?proto.com.elarian.hera.proto.Cash} */ (
    jspb.Message.getWrapperField(this, proto.com.elarian.hera.proto.Cash, 2));
};


/** @param {?proto.com.elarian.hera.proto.Cash|undefined} value */
proto.com.elarian.hera.proto.WalletBalance.prototype.setAvailable = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.elarian.hera.proto.WalletBalance.prototype.clearAvailable = function() {
  this.setAvailable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.elarian.hera.proto.WalletBalance.prototype.hasAvailable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Cash actual = 3;
 * @return {?proto.com.elarian.hera.proto.Cash}
 */
proto.com.elarian.hera.proto.WalletBalance.prototype.getActual = function() {
  return /** @type{?proto.com.elarian.hera.proto.Cash} */ (
    jspb.Message.getWrapperField(this, proto.com.elarian.hera.proto.Cash, 3));
};


/** @param {?proto.com.elarian.hera.proto.Cash|undefined} value */
proto.com.elarian.hera.proto.WalletBalance.prototype.setActual = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.com.elarian.hera.proto.WalletBalance.prototype.clearActual = function() {
  this.setActual(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.elarian.hera.proto.WalletBalance.prototype.hasActual = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, PendingWalletTransaction> pending = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.com.elarian.hera.proto.PendingWalletTransaction>}
 */
proto.com.elarian.hera.proto.WalletBalance.prototype.getPendingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.com.elarian.hera.proto.PendingWalletTransaction>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.com.elarian.hera.proto.PendingWalletTransaction));
};


proto.com.elarian.hera.proto.WalletBalance.prototype.clearPendingMap = function() {
  this.getPendingMap().clear();
};


